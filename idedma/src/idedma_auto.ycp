/**
 * File:
 *   idedma_auto.ycp
 *
 * Package:
 *   Configuration of IDE DMA mode
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of idedma settings
 * @return boolean success of operation
 * @example map mm = $[ "dma_on" : false, ...];
 * @example map ret = CallModule ("idedma_auto", [ mm ]);
 */

{
    textdomain "tune";

    import "Idedma";

    include "idedma/ui.ycp";

    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Did not get the settings, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), list ) )
    {
	y2error ("Bad argument for idedma_auto: %1", Args (0));
	return false;
    }

    // The settings are in the first argument
    list settings = select (args, 0, []);
    y2milestone("Imported: (%1)", settings);

    if (size(settings) == 0)
    {
	settings = [
		$[ "current_dma" : nil, "dev_name" : "/dev/hda", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdb", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdc", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdd", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hde", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdf", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdg", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdh", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdi", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdj", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdk", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil],
		$[ "current_dma" : nil, "dev_name" : "/dev/hdl", "device" : _("Unknown"), "device_type" : _("Unknown"), "dma_on" : nil]	  
	];
    }

    Idedma::Import ( settings );
    define set_contents()
	``{
	term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), Idedma::Summary()),
		  `VSpacing(0.5),
		  `HBox(
			`PushButton(`id(`configure), _("&Configure IDE DMA mode")),
			`HStretch(),
			`PushButton(`id(`reset), _("&Reset Configuration"))
			),
		  `VSpacing(1)
		  );
	Wizard::SetContents(_("NIS Configuration"),
			    contents, "", true, true);
    }
    
    set_contents();
    any result = nil;
    any ret = nil;
    repeat {
	ret = UI::UserInput();
	if (ret == `configure)
	{
	    result = IdedmaAutoSequence();
	    if (result == `next || result == `finish)
	    {
		settings = Idedma::Export ();
	    }
	    Idedma::Set(settings);
	    set_contents();
	}
	else if ( ret == `reset)
	{
	    settings= $[];
	    Idedma::Set(settings);
	    set_contents();
	}
    } until (ret == `back || ret == `next || ret ==`key);

    return [ret, settings];

}
