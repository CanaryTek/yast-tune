/*
 *
 *
 * File:
 *   probeall.ycp
 *
 * Module:
 *          
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * displays complete contents of .probe
 *                   
 *
 */


{
    textdomain "hwinfo";
    include "ui/wizard_dialog.ycp";

    boolean abortPressed=false;

    UI(`OpenDialog(`VBox(
	`Label(_("Probing:")),
	`HBox(
	    `HWeight(1, `Label(`id(`initLab), ""))
	),
//	`TextEntry(`id(`initLab), _("Probing:"), "."),
	`ProgressBar(`id(`initProg), _("Progress:"), 1000, 0),
	`PushButton(`id(`abort), _("&Abort"))
	)
    ));

//    UI(`ChangeWidget (`id(`initLab), `Enabled, false));

    list exclude_list=[.probe.byclass, .probe.bybus, .probe.mouse, .probe.ihw_data];    

    map trans_table=UI(
    $[
	"architecture": _("Architecture"),
	"bus": _("Bus"),
	"card_type": _("Card type"),
	"class_id": _("Class"),
	"cdtype": _("CD type"),
	"dev_name": _("Device name"),
	"device": _("Device"),
	"device_id": _("Device identifier"),
	"family": _("Family"),
	"model": _("Model"),
	"prog_if": _("Prog. interface"),
	"resource": _("Resources"),
	"rev": _("Rev"),
	"sub_class_id" : _("Class (spec)"),
	"sub_device_id" : _("Device identifier (spec)"),
	"sub_vendor" : _("Sub Vendor"),
	"sub_vendor_id" : _("Sub vendor identifier"),
	"unique_key" : _("Unique key"),
	"vendor" : _("Vendor"),
	"vendor_id": _("Vendor identifier"),

	"architecture": _("Architecture"),
	"bios_video": _("Bios video"),
	"boot_arch": _("Boot architecture"),
	"boot_disk": _("Boot disk"),
	"cdrom": _("CDRom"),
	"cpu": _("CPU"),
	"disk": _("Disk"),
	"display": _("Display"),
	"floppy": _("Floppy disk"),
	"has_apm": _("Has APM"),
	"has_pcmcia": _("Has PCMCIA"),
	"has_smp": _("Has SMP"),
	"ihw_data": _("Hardware data"),
	"isdn": _("ISDN"),
	"keyboard": _("Keyboard"),
	"monitor": _("Monitor"),
	"netdev": _("Network devices"),
	"netif": _("Network interface"),
	"printer": _("Printer"),
	"modem": _("Modem"),
	"sound": _("Sound"),
	"storage": _("Storage media"),
	"system": _("System"),
	"usb_type": _("USB type"),
	"version": _("Version")
    ]);

    // if xserver is running, don't probe for mouse

    map Xres=SCR (`Execute (.target.bash_output, "/bin/ps -A | /bin/grep X", $[] ));
    if(size(lookup(Xres, "stdout", ""))==0)
    {
	exclude_list=add(exclude_list, .probe.mouse);
    }
    
    define trans_str(any str)
    ``{
	    return lookup(trans_table, str, str);
    }

    define trans_bool(any b)
    ``{
	if(is(b, boolean))
	{
	    return b?UI(_("Yes")):UI(_("No"));
	}
	return b;
    }

    map classdb=SCR(`Read (.target.yast2, "classnames.ycp"));
    classdb=UI(classdb);

	    /* converts (scalar/nested) lists and maps to tree datastructure
	    */

    define translate_hw_entry(map hw) ``{
	if(haskey(hw, "class_id"))
	{
	    integer iclassid=lookup(hw, "class_id", 0xff);
	    string classid=lookup(lookup(classdb, iclassid, $[]), "name", "");
    
	    hw=add(hw, "class_id", classid);

	    if(haskey(hw, "sub_class_id"))
	    {
		integer isubclassid=lookup(hw, "sub_class_id", 0);
		string subclassid=lookup(lookup(classdb, iclassid, $[]), isubclassid, "");
		hw=add(hw, "sub_class_id", subclassid);
	    }
		
	}
	return hw;
    }

    define get_item_label(integer n)
    ``{
	if(n<0) return "";
	return sformat("%1.", n+1);
    }

    define scalar(any node)
    ``{
	if( is(node, string) ||
	    is(node, boolean) ||
	    is(node, integer) ||
	    is(node, float) ||
	    is(node, locale) ||
	    is(node, path))
	{
	    return true;
	}
	return false;
    }

    define expandTree(any node)
    ``{
	if(node==nil) 
	{
	    return [];
	}
	// if node is scalar, we just return the new item.
	if(scalar(node))
	{	
	    return [`item(sformat("%1", node))];
	}
	
	if(is(node, list))
	{
	    list lout=[];
	    integer q=size(node);
	    integer pos=0;
	    while(pos<q)
	    {
		lout=add(lout, `item(get_item_label(pos), expandTree(select(node, pos))));
		pos=pos+1;
	    }
	    return lout;
	}
	if(is(node, map))
	{
	    node=translate_hw_entry(node);
	    list ltmp=[];
	    ltmp=foreach(`key, `v, node,
	    ``{
		if(scalar(v))
		{
		    ltmp=add(ltmp, `item(sformat("%1 : %2", trans_str(key), trans_bool(v))));
		}
		else
		{
		    ltmp=add(ltmp, `item(trans_str(sformat("%1", key)), expandTree(v)));
		}
		return ltmp;
	    });
	    return sort(ltmp);
	}

	return [];
   }

    define afterLast(string str)
    ``{
	list strs=splitstring(str, ".");
	return select(strs, size(strs)-1);
    }

    /*
    *	returns list of values read from string->path p
    *	progMin, progMax are bounds for progressBar (because of recursion)
    */

    define buildHwTree(string p, integer progMin, integer progMax) 
    ``{

	any a=UI(`PollInput());
	if(a==`cancel || a==`abort)
	{
	    abortPressed=true;
	    return nil;
	}

	UI(`ChangeWidget(`id(`initLab), `Value, trans_str(afterLast(p))));
	path pat=topath(p);

	if(contains(exclude_list, pat))
	{
	    return nil;
	}
	
	list dir=SCR(`Dir(pat));

	if(dir==nil)
	{
	    any val=SCR(`Read(pat));
	    if(scalar(val))
	    {
		return `item(sformat("%1 : %2", trans_str(afterLast(p)), trans_bool(val)));
	    }
	    else if(val==nil ||  val==[] || val==$[])
	    {
		return nil;
	    }
	    else
	    {
		return `item(trans_str(afterLast(p)), expandTree(val));
	    }
	}
	else
	{
	    integer step=1000;
	    if(size(dir)!=0)
	    {
		step=(progMax-progMin)/size(dir); 
	    }
	    integer prog=progMin;
    
	    integer pos=size(dir)-1;
	    list lout=[];
	    term itm=nil;
	    while(pos>=0)
	    {
		itm=buildHwTree(p+"."+select(dir, pos), prog, prog+step);
		if(abortPressed)
		{
		    return nil;
		}
		if(itm!=nil)
		{
		    lout=add(lout, itm);
		}
		pos=pos-1;
		prog=prog+step;
		UI(`ChangeWidget(`id(`initProg), `Value, prog));
	    }
	    return `item(afterLast(p), sort(lout));
	}
	return nil;
    }


    any items=nil;
    path pat=.probe;
    if(size(Args()) >0)
    {
	pat=Args(0);
    }
    
    items=buildHwTree(sformat("%1", pat), 0, 1000);

    if(abortPressed)
    {
	UI(`CloseDialog());
	return;
    }

    string title="All entries";
    if(pat!=.probe)
    {
	title=trans_str(afterLast(sformat("%1", pat)));
    }

    UI(`CloseDialog());

    term con=`Tree(  `id(`idTree), `opt(`vstretch, `hstretch),
                                    title,
                                    select(items,1));

    UI(`CreateWizardDialog());
    UI(`SetWizardContents (_("Hardware info"), con, _("<P><B>Hardware info</B> module displays the hardware 
details of your computer. Click any node for more info</p>"), false, true));

    UI(`ReplaceWidget(`id(`rep_back), `HStretch()));
    UI(`ReplaceWidget(`id(`rep_next), `HStretch()));
    UI(`ReplaceWidget(`id(`rep_abort), `PushButton(`id(`next), _("&Close"))));
    
    any event=nil;   
 
    while(event!=`abort && event !=`next && event != `cancel)
    {
	    event=UI(`UserInput());
	    y2error(sformat("%1", event));	    
    }    
    UI(`CloseDialog());
}
