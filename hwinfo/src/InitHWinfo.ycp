/**
 *
 * Module:	Initial HW info module
 *
 * Author:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * Collect and store hardware information.
 */

{

module "InitHWinfo";

import "String";
import "Confirm";
import "Progress";

include "hwinfo/routines.ycp";

textdomain "tune";

boolean initialized = false;

// CPU summary string
string cpu_string = "";
// memory summary string
string memory_string = "";

// list of detected devices
list detectedHW = nil;

// default is "/dev/fd0" floppy device (used when floppy detection is skipped as a fallback)
global map floppy = $["/dev/fd0" : _("Floppy disk")];

/**
 * Start hardware detection (only CPU and main memory)
 * @param force If true then start detection again (discard cached values)
 * @return boolean True on success
 */
global define boolean Initialize(boolean force) ``{
    if (initialized == true && force == false)
    {
	return true;
    }

    // initialize procesor string
    list cpu_result = (list) SCR::Read(.probe.cpu);
    map cpus = $[];

    foreach(map info, cpu_result, ``{
	    string str = info["name"]:_("Unknown Processor");
	    integer counter = cpus[str]:0;
	    cpus[str] = counter + 1;
	}
    );

    boolean first = true;
    cpu_string = "";

    foreach(string cpu, integer count, cpus, ``{

	    if (!first)
	    {
		cpu_string = cpu_string + ", ";
	    }
	    else
	    {
		first = false;
	    }

	    if (count > 1)
	    {
		// create processor count string
		// %1 is integer number (greater than 1)
		// %2 is processor model name
		cpu_string = cpu_string + sformat(_("%1x %2"), count, cpu);
	    }
	    else
	    {
		cpu_string = cpu_string + cpu;
	    }
	}
    );

    // initialize memory string
    memory_string = "";

    list memory = (list) SCR::Read(.probe.memory);

    y2milestone("memory: %1", memory);
    integer memory_size = 0;

    foreach(map info, memory, ``{
	    // internal class, main memory
	    if (info["class_id"]:0 == 257 && info["sub_class_id"]:0 == 2)
	    {
		list minf = info["resource", "phys_mem"]:[];
		foreach(map i, minf, ``{
			memory_size = memory_size + i["range"]:0;
		    }
		);
	    }
	}
    );

    memory_string = String::FormatSize(memory_size);

    initialized = true;

    return true;
}

/**
 * Return short system description
 * @param reset If reset is true then always do hardware detection
 * @return list(string) list of hardware desciptions
 */
global define list<string> MakeProposal(boolean reset) ``{
    Initialize(reset);
    return [ _("Processor: ") + cpu_string, _("Main memory: ") + memory_string ];
}

/**
 * Detect all hardware present in the system
 * @param force If force is true then detection is always started (cached value is discarded)
 * @return list list of maps - detected hardware items ()
 */
global define list DetectedHardware(boolean force) ``{

    // return cached values if possible
    if (detectedHW != nil && force != true)
    {
	return detectedHW;
    }

    detectedHW = [];

    // probe devices, store model, class, uniq. ID for each device

    // probe by bus
    // list(string) paths = [ "cpu", "memory", "ide", "pci", "scsi", "isapnp", "floppy", "usb", "monitor" ];

    // probe by device class
    list<string> paths = [ "cpu", "memory", "cdrom", "floppy", "disk", "display", "mouse", "keyboard", "sound", "isdn", "modem", "storage", "netcard", "monitor", "printer", "tv", "dvb", "scanner", "camera", "chipcard", "usbctrl", "ieee1394ctrl", "hub", "braille", "joystick", "bios", "pppoe" ];

    Progress::New(_("Detecting hardware"), "", size(paths), [_("Hardware detection")], [_("Detecting hardware")], "Hardware detection is in progress, please wait. ");

    Progress::NextStage();

    foreach(string subpath, paths, ``{
	    path p = add(.probe, subpath);

	    // translate path name
	    string pathname = trans_table[subpath]:nil;

	    // use untranslated string if translation failed
	    if (pathname == nil)
	    {
		pathname = subpath;
	    }

	    // set progress bar label
	    Progress::Title(sformat(_("%1 ..."), pathname));

	    // don't ask for probing CPU and memory, they were already probed and detection should be harmless
	    boolean detect = (subpath == "cpu" || subpath == "memory") ? true : Confirm::Detection(pathname);

	    // confirm hardware detection in the manual mode
	    if (detect == true)
	    {
		y2milestone("Probing: %1", p);
		list result = (list) SCR::Read(p);

		// store floppy devices, used in hwinfo output saving
		if (subpath == "floppy")
		{
		    // reset list of floppies
		    floppy = $[];

		    if (size(result) > 0)
		    {
			foreach(map f, result, ``{
				string device = f["dev_name"]:nil;
				string model = f["model"]:nil;

				if (device != nil && model != nil)
				{
				    floppy[device] = model;
				}
			    }
			);
		    }

		    y2milestone("Detected floppy devices: %1", floppy);
		}

		if (size(result) > 0)
		{
		    foreach(map info, result, ``{
			    // device name (CPU model name string has key "name" instead of "model")
			    string model = (subpath == "cpu") ? info["name"]:_("Unknown device") : info["model"]:_("Unknown device");
			    y2debug("Model: %1", model);

			    detectedHW = add(detectedHW, $[ "model" : model, "info" : info ]);
			}
		    );
		}
	    }

	    // update progress bar
	    Progress::NextStep();
	}
    );

    y2milestone("Detected HW: %1", detectedHW);

    return detectedHW;
}

}
