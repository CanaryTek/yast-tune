/**
 * File:		proposal_hwinfo.ycp
 *
 * Module:		Initial hwinfo
 *
 * $Id$
 *
 * Author:		Ladislav Slezak <lslezak@suse.cz>
 *
 * Purpose:		Proposal function dispatcher for initial hwinfo module.
 */

{
    textdomain "tune";

    import "InitHWinfo";
    import "Call";

    string func  = WFM::Args(0);
    map    param = WFM::Args(1);
    map    ret   = $[];

    // make proposal
    if ( func == "MakeProposal" )
    {
	boolean force_reset = param["force_reset"]:false;
	ret = $[ "raw_proposal" : InitHWinfo::MakeProposal(force_reset) ];
    }
    // start configuration workflow
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	// start inst_hwinfo module - start configuration workflow
	symbol result = Call::Function("inst_hwinfo", []);

	// TODO: change result to `back when no change was done?
	//       this should prevent refreshing proposal
	// Fill return map
	ret =
	    $[
	      "workflow_sequence": result
	    ];
    }
    // return proposal description
    else if ( func == "Description" )
    {
	// Fill return map.
	ret =
	    $[
	      // this is a heading
	      "rich_text_title"	:	_( "System"  ),
	      // this is a menu entry
	      "menu_title"	:	_( "&System" ),
	      "id"		:	"init_hwinfo"
	    ];
    }
    // write settings
    else if ( func == "Write" )
    {
	// Fill return map.
	ret =
	    $[
	      "success" : true
	    ];
    }

    // return result
    return ret;
}
